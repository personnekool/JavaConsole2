plugins {
    id "application"
}

// Project Methods
setDescription("CLI ToDoApplication")
setGroup("com.app")
setVersion("1.0")

java{
    toolchain {
        setLanguageVersion(JavaLanguageVersion.of(17))
    }
}
jar{
    manifest {
        def manifestAttributes = [
                "Manifest-Version":getVersion(),
                "Main-Class": MAIN_CLASS_NAME
        ]
        attributes(manifestAttributes)
    }
    archiveBaseName.set(JAR_FILE_NAME)
}

run {
    standardInput = System.in
}

application{
    mainClassName = MAIN_CLASS_NAME.toString() // resolve to main function location: com.app.Main
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.15.1'
    // https://mvnrepository.com/artifact/org.apache.groovy/groovy
    implementation 'org.apache.groovy:groovy:5.0.0-alpha-5'

}

test {
    useJUnitPlatform()
}


// Gradle tasks
tasks.register('Task1'){
    setGroup('Personal')
    setDescription('Task1 prints hello in the console')
    doLast{
        print msg1
    }
}

tasks.register('Task2'){
    setDescription('Task2 prints world in the console')
    setGroup("Personal")
    doLast{
        print msg2
    }
}

//Exercise 2.10
// Next two lines change order of execution with dependencies
//Task1.mustRunAfter(Task2)
Task2.mustRunAfter(Task1)

tasks.register('Task3') {
    description = 'Task3 executes Task1 and Task2'
    group = 'Personal'
    dependsOn(['Task1', 'Task2'])
    doLast {
        print "Task3 depends on Task1 and Task2"
    }
}
// Exercise 2.11 (Finalizers change order of execution (NO DEPENDENCY)
//Task1.finalizedBy(Task2)    // gradle Task1
Task2.finalizedBy(Task1)

// Exercise 12
tasks.register('Task4',DefaultTask1)
// Exercise 13
tasks.register('Task5', DefaultTask2,"Personal","Task Constructor with arguments", "Task5 constructor is running")
// Exercise 14
tasks.register('Task6', DefaultTask3, "Task6 is running", [Task4, Task5])
// Exercise 15 (Task change release propoertyin version.properties to true)
tasks.register('Task7', MakeReleaseVersionTask){
    versionPropertyFile = file("./version.properties")
    release=true;
}
tasks.register('Task8', MakeReleaseVersionTask){
    versionPropertyFile = file("./version.properties")
    release=false
}
// Exercise 16
tasks.register('Task9'){
    setGroup('Versioning')
    setDescription('Change jar version according to release value found in version.properties')
    //dependsOn(Task8) // set release to false
    dependsOn(Task7) // set release to true
    doLast{
        setVersion(ProjectVersion.readVersion('./version.properties').toString())
    }
    finalizedBy(clean, build)
}